The Command Line After you install Ruby, you can fire up the interactive command line in Windows, Linux, or Mac OSX.
I’m using Windows.            
C:\>  irbirb(main):001:0> For brevity, I won’t write the full irb prompt every time.
You can execute Ruby statements line by line. The value returned by each expression is preceded by ⇒.            
irb> a = 4=> 4irb> a=> 4
irb> a + 7=> 11          

You can choose to put multiple statements on one line, separated by a semicolon.          
irb> list = ["one", "two","three"];1=>1irb> list=>["one", "two", "three"]          
You can also have a statement that spans multiple lines.            
irb> [2,3,4,5].each do |n|irb>   
if n%2==0irb>      
puts "even"
irb>   
else
irb>       
puts "odd"
irb>   
end

irb> end=> "even"=> "odd"=> "even"=> "odd"         
You can put the code into a file called sample.rb, located in the same directory or folder from which you ran            
irb                                        .        
1  [2,3,4,5].each do |n|2      
if n%2 == 03          
puts "even"4     
else5          
puts "odd"6      
end7  
end       

Then, with irb:           
irb> load "sample.rb"
irb> end=> "even"=> "odd"=> "even"=> "odd"
irb>          
You could also copy the code block from your text editor and paste it directly into your command line and get the
same result, as long as you use only spaces for indentation. (Using tabs for indentation will work fine if you load 
the file from the command prompt, but if you paste tabs directly into irb, it will generate errors).
You can either type the code samples from this book into irb directly or type them into a text editor and then load 
the file as just shown.Object ScopeWhen you are in a Ruby program, the general method of executing a method f on an 
object obj is as follows:            
obj.f         

That is true whether you are in a Ruby program or the command line. When code is in the main program file, or in
the irb command-line interpreter, there is an implied context for many functions, such as puts. That is why you can do this: 
puts "Hello world"          

You don’t need to specify a class to qualify puts, because puts is a method of the underlying context object.StringStrings
are basic constructs in all languages. Let’s look at a few basic operations used in this book. Try them out on the irb 
command line for yourself.     

length or size           This yields the size of the string.                      

downcase                 This converts all letters to lowercase.                     

upcase                   This converts all letters to uppercase.                      

capitalize               This capitalizes the first letter of a string.                                    

split()                  This searches a substring for the argument string and splits the string into a array comprising substrings on both 
sides of the split argument, while the substring of the split argument is discarded. If there are no matches, an array
is returned with the whole string:                 
irb> base_string = "abc def  ghi"
irb> base_string.split(" ")=> ["abc","def","ghi"]
irb> base_string.split("  ")=> ["abc def","ghi"]
irb> base_string.split(" d")=> ["abc","ef ghi"]
irb> base_string.split("efghi")=> ["abc def ghi"]                                                   

join()                     This joins each element of an array of strings with the string in the join argument as the 
separator.                 
irb> stringlist = ["This", "is", "a", "sentence"]
irb> stringlist.join(" ")=> "This is a sentence"
irb> stringlist.join(",")=> "This,is,a,sentence"
irb> stringlist.join(" A SPACE ")=> "This A SPACE is A SPACE a A SPACE sentence"                                 

interpolation               This lets you define a string template with parameters. 
The string #{} gives you a place to put a variable.                 
irb> first = "Jack"; last = "Black"
irb> full_name = "#{first} #{last}"=> "Jack Black"               

This is especially useful for iterating over a list:               
irb> smith_brothers = ["Terry", "Jerry", "Harry"]
irb> smith_brothers.each{|brother| puts "#{brother} Smith"}Terry SmithJerry SmithHarry Smith=> ["Terry", "Jerry", "Harry"]               

C/C++ programmers will recognize string interpolation as being similar to the sprintf function in the C standard library.          

ArrayArrays in Ruby are like arrays in other languages. They are a collection of things indexed by a whole number (e.g., 0,1,2,…). 
In Ruby, an array can contain any Ruby object at an index. Array indices in Ruby start at 0.Arrays implement the Ruby Enumerable interface,
so they will have key methods such as each, map, reduce, select, and others.Special Methods                              

compact()                   This method on an array gets rid of nil members. For example:                    
irb> [1,nil,2,nil,nil,3,nil,[]].compact=> [1,2,3,[]]                                                            

flatten()                   This method gets rid of inner arrays to an arbitrary depth. It is often useful when dealing with
nested map and reduce statements. For example:                    
irb> [[1,[2,3]],4,[5,6]].flatten=> [1,2,3,4,5,6]                                                           

push()                       This method pushes an element onto the end of an array and returns a new array. For example:
irb> [1,2,3,4,5].push(666)=> [1,2,3,4,5,666]                                                            

pop                          This method removes the last element of an array and returns that element and returns a new array. For example:                   
irb> the_array = [1,2,3,4,5]irb> tail = the_array.popirb> tail=> 5irb> the_array=> [1, 2, 3, 4]                                                          

unshift()                    This method pushes an element onto the beginning of an array and returns a new array. For example:                    
irb> the_array = [1,2,3,4,5]irb> the_array.unshift(666)=> [666, 1, 2, 3, 4, 5]                                                           

shift                        This method removes the first element of an array and returns
that element and modifies the old array. For example:                   
irb> the_array = [1,2,3,4,5]
irb> head = the_array.shiftirb> head=> 1
irb> the_array=> [2, 3, 4, 5]                                          

Hash          Another term for hash is an “associative array,” or even a “dictionary”, Hashes are indexed by a key object, 
and there is a value (another object) for each key object.  

irb> newhash = Hash.new=> {}
irb> newhash2 = {}=> {}         

These are two ways of creating a new hash. The key of a hash can be any object or symbol.           
irb> newhash = {key1: "some_value", key2: 2}=> {:key1=> "some_value", :key2=>2}
irb> newhash2 = {}irb> newhash2[:key1] = "key1_symbol"irb> newhash2["key1"] = "key3_string"irb> newhash2[3] = 3
irb> newhash2[:key4] = [4,"44"]irb> newhash2[[3,"33"]] = "wow"
irb> newhash2=> {:key1=>"key1_symbol", "key2"=>"key2_string", 2=>1, :key4=>[4,"44"], [3,"33]=\"wow" }        

The key can be any object, including symbols, strings, numbers, hashes, arrays, or anything. When iterating through a 
hash using each or map, it emits a single array with the key as the first element and the value as the second element,
or it can emit two elements, which are the key and the value. (Note that inspect is how you can inspect the content of any object).            
irb> newhash = {a: 1, b: 2, c: 3}
irb> newhash.each{|e| puts e.inspect}[:a, 1][:b, 2][:c, 3]=> {:a => 1, :b => 2, :c => 3}
irb> newhash.map{|key, value| "The key is #{key} and the value is #{value}"}=> ["The key is a and the value is 1",

"The key is b and the value is 2", "The key is c and the value is 3"]                     
Block-passing Syntax          

Ruby is one of many languages that allow lexical closures, otherwise known (kind of) as anonymous functions or blocks. 
These functions are dynamically created.

The function can take the form of a defined function. For example:            
irb> def plus_two(a,b)irb>    a + b + 2
irb> endirb> plus_two(3,4)=> 9        

Or, you could define it as follows:           
irb> plus_two = ->(a,b) doirb>    a + b + 2irb> end          

Or, you could define it this way:           
irb> plus_three = ->(a,b){a + b + 3}
irb> plus_three.call(5,7)=> 15         

Now, anonymous functions or blocks can be passed to other functions as parameters. A function that takes a function
(defined or anonymous) as a parameter will optionally execute the function in its program flow. Suppose there is a function
called printit() defined as follows:           
irb> printit = ->(a) doirb>    
puts a.inspectirb> 
end        

Now, suppose you want to print each element of a range. You will call each on the array, which will run the block passed to 
each for each element of the array.            
irb> (1..5).each(&printit)12345=> (1..5)         

You could also pass an actual block of code to run. The block is surrounded by do and end or { and }. Objects between the vertical
bars are optionally passed to the block (depending on the definition of the block), and they are used by the block to execute. The 
return value of a block is the value of the last expression in the block.           
irb> (1..5).each do |num|irb>    
puts num.inspectirb> 
end        

You will get the same output as earlier. Ditto for the following:           
irb> (1..5).each{|num| puts num.inspect }        

In Ruby, map, reduce, and select all take a code block as a parameter, and the code block is executed as defined by the 
function. In this book, I will use the do-end syntax most often, and sometimes the { } syntax.Reading from FilesA common operation
in data processing is reading from files and writing to files. 
Suppose you have names.txt, which looks like this:       
1,John2,Jack3,Jim4,Jared5,John         

To read it, you would do the following:            
irb> names = File.open("names.txt").read  

Now, on some computers, new lines are split by a carriage return (“\n”), and on other computers lines are split by a line feed 
and a carriage return (“\r\n”).

If you want to split this file into rows, you would do the following:           
irb> names.split("\n")          
That could yield            
=>["1,John\r", "2,Jack\r", "3,Jim\r", "4,Jared\r", "5,John\r"] 

or            =>["1,John", "2,Jack", "3,Jim", "4,Jared", "5,John"]          

To ensure consistency, use the chomp method, which removes whitespace characters if they exist. For example:           
irb> "John\r".chomp=> "John"irb> "John".chomp=> "John"          

So, for our array, just to ensure that we don’t pick up stray line feeds, we do the following:           
irb> names.split("\n").map{|row| row.chomp}=>["1,John", "2,Jack", "3,Jim", "4,Jared", "5,John"]      

I assume that the examples in this book don’t use “\r\n”, but rather just “\n”. If that doesn’t work on your operating system, 
use the chomp() method as shown before working with the array.

