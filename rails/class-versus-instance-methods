Class Methods verses Instance Methods in Ruby

A Class Method is a method that is defined on the class. For example:

class Member 
def self.find(id)  
puts "finding member with the id of #{id}"  
end  
end

I defined a find method on the Member class that accepts an id. 
In theory this would go to the database to find the particular member and return it as a Member object.

I used self in the method definition. This is signifying that this method is a Class Method.

To use this method, you invoke it from the class:

member = Member.find(‘xyz’)  

When would you use a Class Method?
A Class Method is a piece of functionality that belongs to that class, but is not tied to any particular single instance.

In this case, we’re simply using the find method to encapsulate the process of retrieving a basket object from the database.

You should use Class Methods when the functionality you are writing does not belong to an instance of that class.

What are Instance Methods
Instance Methods on the other hand, can only be called on a particular instance of the class.

class Member  
def self.find(id)  
puts "finding member with the id of #{id}"  
end

def products  
[]  
end  
end  
I've added a products Instance Method. This Instance Method only makes sense when 
we actually have an instance of the Basket class:

member = Member.new  
=> #<Basket:0x003fd2e9946iub0>

member.products  
=> []  
If you try to call an Instance Method directly on the class, you will get an error:

Member.products  
NoMethodError: undefined method ‘products’ for Member:Class  
And similarly, if you try to call a Class Method on an object instance, you will also get an error:

member.find(‘def’)  
NoMethodError: undefined method ‘find’ for #<Basket:0x007fd2e446c7b0>  
When would you use Instance Methods?
You use Instance Methods when you need to act on a particular instance of the class.

This is often when the functionality concerns the identity of the instance such as calling 
properties on the object, or invoking behaviour.

For example, the products method only makes sense in the context of a Basket instance. You can’t 
have a list of products without actually having a basket object to work with.

When the functionality you are implementing is tied to the identity of a particular object, you 
should be using instance methods.

be mindful of the functionality you are implementing and whether it should be in the context of a particular 
instance of the object or not.
